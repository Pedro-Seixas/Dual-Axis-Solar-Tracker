
SolarTracker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000036e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000915  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072e  00000000  00000000  00000d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e8  00000000  00000000  0000147b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00001864  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c9  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  00001ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001ebb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 9b 00 	call	0x136	; 0x136 <main>
  78:	0c 94 8b 01 	jmp	0x316	; 0x316 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <pwm_init>:
//Function to convert a string to characters
void uart_puts(const char *str, unsigned int size) {
	for(unsigned int i = 0; i < size; i++){
		uart_putchar(str[i]);
	}
}
  80:	82 ea       	ldi	r24, 0xA2	; 162
  82:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  86:	8b e1       	ldi	r24, 0x1B	; 27
  88:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  8c:	87 e8       	ldi	r24, 0x87	; 135
  8e:	93 e1       	ldi	r25, 0x13	; 19
  90:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  94:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  98:	08 95       	ret

0000009a <adc_init>:
  9a:	80 e4       	ldi	r24, 0x40	; 64
  9c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  a0:	ea e7       	ldi	r30, 0x7A	; 122
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	87 e8       	ldi	r24, 0x87	; 135
  a6:	80 83       	st	Z, r24
  a8:	80 81       	ld	r24, Z
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	80 83       	st	Z, r24
  ae:	08 95       	ret

000000b0 <uart_init>:
  b0:	88 e1       	ldi	r24, 0x18	; 24
  b2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  b6:	86 e0       	ldi	r24, 0x06	; 6
  b8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  bc:	87 e6       	ldi	r24, 0x67	; 103
  be:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  c2:	08 95       	ret

000000c4 <delay>:
  c4:	dc 01       	movw	r26, r24
  c6:	20 e0       	ldi	r18, 0x00	; 0
  c8:	34 e2       	ldi	r19, 0x24	; 36
  ca:	44 ef       	ldi	r20, 0xF4	; 244
  cc:	50 e0       	ldi	r21, 0x00	; 0
  ce:	0e 94 4f 01 	call	0x29e	; 0x29e <__muluhisi3>
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	30 ea       	ldi	r19, 0xA0	; 160
  d6:	4f e0       	ldi	r20, 0x0F	; 15
  d8:	50 e0       	ldi	r21, 0x00	; 0
  da:	0e 94 30 01 	call	0x260	; 0x260 <__divmodsi4>
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	27 bd       	out	0x27, r18	; 39
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	84 bd       	out	0x24, r24	; 36
  e6:	85 e0       	ldi	r24, 0x05	; 5
  e8:	85 bd       	out	0x25, r24	; 37
  ea:	a9 9b       	sbis	0x15, 1	; 21
  ec:	fe cf       	rjmp	.-4      	; 0xea <delay+0x26>
  ee:	15 bc       	out	0x25, r1	; 37
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	85 bb       	out	0x15, r24	; 21
  f4:	08 95       	ret

000000f6 <returnADC>:
  f6:	ec e7       	ldi	r30, 0x7C	; 124
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	90 81       	ld	r25, Z
  fc:	98 7f       	andi	r25, 0xF8	; 248
  fe:	90 83       	st	Z, r25
 100:	90 81       	ld	r25, Z
 102:	89 2b       	or	r24, r25
 104:	80 83       	st	Z, r24
 106:	ea e7       	ldi	r30, 0x7A	; 122
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	80 64       	ori	r24, 0x40	; 64
 10e:	80 83       	st	Z, r24
 110:	04 c0       	rjmp	.+8      	; 0x11a <returnADC+0x24>
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 62 00 	call	0xc4	; 0xc4 <delay>
 11a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 11e:	84 ff       	sbrs	r24, 4
 120:	f8 cf       	rjmp	.-16     	; 0x112 <returnADC+0x1c>
 122:	ea e7       	ldi	r30, 0x7A	; 122
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	80 61       	ori	r24, 0x10	; 16
 12a:	80 83       	st	Z, r24
 12c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 130:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 134:	08 95       	ret

00000136 <main>:

int main(void)
{
	//PB1 & PB2 output
	DDRB |= (1<<1) | (1<<2);
 136:	84 b1       	in	r24, 0x04	; 4
 138:	86 60       	ori	r24, 0x06	; 6
 13a:	84 b9       	out	0x04, r24	; 4
	
	adc_init();
 13c:	0e 94 4d 00 	call	0x9a	; 0x9a <adc_init>
	pwm_init();
 140:	0e 94 40 00 	call	0x80	; 0x80 <pwm_init>
	uart_init();
 144:	0e 94 58 00 	call	0xb0	; 0xb0 <uart_init>
	//Range variable sets a range for the difference is values between two sensors
	//This helps control oscillations and reduce the number of times that the motor moves
	uint16_t range = 30;
	
	//Initialize the servo motors to a initial position (437 is the middle position, 0 degrees)
	OCR1A = 437;
 148:	85 eb       	ldi	r24, 0xB5	; 181
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 150:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 437;
 154:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 158:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	
	//This is the length of the message if we would like to transmit the light intensity serially
	char message[4];
	
	delay(5);
 15c:	85 e0       	ldi	r24, 0x05	; 5
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 62 00 	call	0xc4	; 0xc4 <delay>
		//itoa(left, message, 10);
		//uart_puts(message, sizeof message);
		//uart_putchar('|');
		
		//First get sensor values to later compare them
		left = returnADC(3);
 164:	83 e0       	ldi	r24, 0x03	; 3
 166:	0e 94 7b 00 	call	0xf6	; 0xf6 <returnADC>
 16a:	6c 01       	movw	r12, r24
		right = returnADC(0);
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	0e 94 7b 00 	call	0xf6	; 0xf6 <returnADC>
 172:	8c 01       	movw	r16, r24
		up = returnADC(2);
 174:	82 e0       	ldi	r24, 0x02	; 2
 176:	0e 94 7b 00 	call	0xf6	; 0xf6 <returnADC>
 17a:	7c 01       	movw	r14, r24
		down = returnADC(1);
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 7b 00 	call	0xf6	; 0xf6 <returnADC>
 182:	ec 01       	movw	r28, r24
		
		// 1ms = (64 * (1 + bottomOCR1A ))/16Mhz --> BottomOCR1A = 249
		if(left>right && (left-right)>range){
 184:	0c 15       	cp	r16, r12
 186:	1d 05       	cpc	r17, r13
 188:	c0 f4       	brcc	.+48     	; 0x1ba <main+0x84>
 18a:	c6 01       	movw	r24, r12
 18c:	80 1b       	sub	r24, r16
 18e:	91 0b       	sbc	r25, r17
 190:	4f 97       	sbiw	r24, 0x1f	; 31
 192:	98 f0       	brcs	.+38     	; 0x1ba <main+0x84>
			if(OCR1A > 249){
 194:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 198:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 19c:	8a 3f       	cpi	r24, 0xFA	; 250
 19e:	91 05       	cpc	r25, r1
 1a0:	30 f1       	brcs	.+76     	; 0x1ee <main+0xb8>
				--OCR1A;
 1a2:	e8 e8       	ldi	r30, 0x88	; 136
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	91 81       	ldd	r25, Z+1	; 0x01
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	91 83       	std	Z+1, r25	; 0x01
 1ae:	80 83       	st	Z, r24
				delay(5);
 1b0:	85 e0       	ldi	r24, 0x05	; 5
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 62 00 	call	0xc4	; 0xc4 <delay>
 1b8:	1a c0       	rjmp	.+52     	; 0x1ee <main+0xb8>
			}
			// 2.5ms = (64 * (1 + topOCR1A ))/16Mhz --> topOCR1A = 624
			}else if(right > left && (right - left)>range){
 1ba:	c0 16       	cp	r12, r16
 1bc:	d1 06       	cpc	r13, r17
 1be:	b8 f4       	brcc	.+46     	; 0x1ee <main+0xb8>
 1c0:	0c 19       	sub	r16, r12
 1c2:	1d 09       	sbc	r17, r13
 1c4:	0f 31       	cpi	r16, 0x1F	; 31
 1c6:	11 05       	cpc	r17, r1
 1c8:	90 f0       	brcs	.+36     	; 0x1ee <main+0xb8>
			if(OCR1A < 624){
 1ca:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1ce:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1d2:	80 37       	cpi	r24, 0x70	; 112
 1d4:	92 40       	sbci	r25, 0x02	; 2
 1d6:	58 f4       	brcc	.+22     	; 0x1ee <main+0xb8>
				++OCR1A;
 1d8:	e8 e8       	ldi	r30, 0x88	; 136
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	91 81       	ldd	r25, Z+1	; 0x01
 1e0:	01 96       	adiw	r24, 0x01	; 1
 1e2:	91 83       	std	Z+1, r25	; 0x01
 1e4:	80 83       	st	Z, r24
				delay(5);
 1e6:	85 e0       	ldi	r24, 0x05	; 5
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 62 00 	call	0xc4	; 0xc4 <delay>
			}
		}
		//Here we limited the range of motion of the top servo motor.
		if(up > down && (up - down) >range){
 1ee:	ce 15       	cp	r28, r14
 1f0:	df 05       	cpc	r29, r15
 1f2:	c8 f4       	brcc	.+50     	; 0x226 <main+0xf0>
 1f4:	c7 01       	movw	r24, r14
 1f6:	8c 1b       	sub	r24, r28
 1f8:	9d 0b       	sbc	r25, r29
 1fa:	4f 97       	sbiw	r24, 0x1f	; 31
 1fc:	a0 f0       	brcs	.+40     	; 0x226 <main+0xf0>
			if(OCR1B > 349){
 1fe:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 202:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 206:	8e 35       	cpi	r24, 0x5E	; 94
 208:	91 40       	sbci	r25, 0x01	; 1
 20a:	08 f4       	brcc	.+2      	; 0x20e <main+0xd8>
 20c:	ab cf       	rjmp	.-170    	; 0x164 <main+0x2e>
				--OCR1B;
 20e:	ea e8       	ldi	r30, 0x8A	; 138
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	91 81       	ldd	r25, Z+1	; 0x01
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	91 83       	std	Z+1, r25	; 0x01
 21a:	80 83       	st	Z, r24
				delay(5);
 21c:	85 e0       	ldi	r24, 0x05	; 5
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 62 00 	call	0xc4	; 0xc4 <delay>
 224:	9f cf       	rjmp	.-194    	; 0x164 <main+0x2e>
			}
			}else if(down > up && (down - up)>range){
 226:	ec 16       	cp	r14, r28
 228:	fd 06       	cpc	r15, r29
 22a:	08 f0       	brcs	.+2      	; 0x22e <main+0xf8>
 22c:	9b cf       	rjmp	.-202    	; 0x164 <main+0x2e>
 22e:	ce 19       	sub	r28, r14
 230:	df 09       	sbc	r29, r15
 232:	6f 97       	sbiw	r28, 0x1f	; 31
 234:	08 f4       	brcc	.+2      	; 0x238 <main+0x102>
 236:	96 cf       	rjmp	.-212    	; 0x164 <main+0x2e>
			if(OCR1B < 524){
 238:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 23c:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 240:	8c 30       	cpi	r24, 0x0C	; 12
 242:	92 40       	sbci	r25, 0x02	; 2
 244:	08 f0       	brcs	.+2      	; 0x248 <main+0x112>
 246:	8e cf       	rjmp	.-228    	; 0x164 <main+0x2e>
				++OCR1B;
 248:	ea e8       	ldi	r30, 0x8A	; 138
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	91 81       	ldd	r25, Z+1	; 0x01
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	91 83       	std	Z+1, r25	; 0x01
 254:	80 83       	st	Z, r24
				delay(5);
 256:	85 e0       	ldi	r24, 0x05	; 5
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 62 00 	call	0xc4	; 0xc4 <delay>
 25e:	82 cf       	rjmp	.-252    	; 0x164 <main+0x2e>

00000260 <__divmodsi4>:
 260:	05 2e       	mov	r0, r21
 262:	97 fb       	bst	r25, 7
 264:	1e f4       	brtc	.+6      	; 0x26c <__divmodsi4+0xc>
 266:	00 94       	com	r0
 268:	0e 94 47 01 	call	0x28e	; 0x28e <__negsi2>
 26c:	57 fd       	sbrc	r21, 7
 26e:	07 d0       	rcall	.+14     	; 0x27e <__divmodsi4_neg2>
 270:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <__udivmodsi4>
 274:	07 fc       	sbrc	r0, 7
 276:	03 d0       	rcall	.+6      	; 0x27e <__divmodsi4_neg2>
 278:	4e f4       	brtc	.+18     	; 0x28c <__divmodsi4_exit>
 27a:	0c 94 47 01 	jmp	0x28e	; 0x28e <__negsi2>

0000027e <__divmodsi4_neg2>:
 27e:	50 95       	com	r21
 280:	40 95       	com	r20
 282:	30 95       	com	r19
 284:	21 95       	neg	r18
 286:	3f 4f       	sbci	r19, 0xFF	; 255
 288:	4f 4f       	sbci	r20, 0xFF	; 255
 28a:	5f 4f       	sbci	r21, 0xFF	; 255

0000028c <__divmodsi4_exit>:
 28c:	08 95       	ret

0000028e <__negsi2>:
 28e:	90 95       	com	r25
 290:	80 95       	com	r24
 292:	70 95       	com	r23
 294:	61 95       	neg	r22
 296:	7f 4f       	sbci	r23, 0xFF	; 255
 298:	8f 4f       	sbci	r24, 0xFF	; 255
 29a:	9f 4f       	sbci	r25, 0xFF	; 255
 29c:	08 95       	ret

0000029e <__muluhisi3>:
 29e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <__umulhisi3>
 2a2:	a5 9f       	mul	r26, r21
 2a4:	90 0d       	add	r25, r0
 2a6:	b4 9f       	mul	r27, r20
 2a8:	90 0d       	add	r25, r0
 2aa:	a4 9f       	mul	r26, r20
 2ac:	80 0d       	add	r24, r0
 2ae:	91 1d       	adc	r25, r1
 2b0:	11 24       	eor	r1, r1
 2b2:	08 95       	ret

000002b4 <__udivmodsi4>:
 2b4:	a1 e2       	ldi	r26, 0x21	; 33
 2b6:	1a 2e       	mov	r1, r26
 2b8:	aa 1b       	sub	r26, r26
 2ba:	bb 1b       	sub	r27, r27
 2bc:	fd 01       	movw	r30, r26
 2be:	0d c0       	rjmp	.+26     	; 0x2da <__udivmodsi4_ep>

000002c0 <__udivmodsi4_loop>:
 2c0:	aa 1f       	adc	r26, r26
 2c2:	bb 1f       	adc	r27, r27
 2c4:	ee 1f       	adc	r30, r30
 2c6:	ff 1f       	adc	r31, r31
 2c8:	a2 17       	cp	r26, r18
 2ca:	b3 07       	cpc	r27, r19
 2cc:	e4 07       	cpc	r30, r20
 2ce:	f5 07       	cpc	r31, r21
 2d0:	20 f0       	brcs	.+8      	; 0x2da <__udivmodsi4_ep>
 2d2:	a2 1b       	sub	r26, r18
 2d4:	b3 0b       	sbc	r27, r19
 2d6:	e4 0b       	sbc	r30, r20
 2d8:	f5 0b       	sbc	r31, r21

000002da <__udivmodsi4_ep>:
 2da:	66 1f       	adc	r22, r22
 2dc:	77 1f       	adc	r23, r23
 2de:	88 1f       	adc	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	1a 94       	dec	r1
 2e4:	69 f7       	brne	.-38     	; 0x2c0 <__udivmodsi4_loop>
 2e6:	60 95       	com	r22
 2e8:	70 95       	com	r23
 2ea:	80 95       	com	r24
 2ec:	90 95       	com	r25
 2ee:	9b 01       	movw	r18, r22
 2f0:	ac 01       	movw	r20, r24
 2f2:	bd 01       	movw	r22, r26
 2f4:	cf 01       	movw	r24, r30
 2f6:	08 95       	ret

000002f8 <__umulhisi3>:
 2f8:	a2 9f       	mul	r26, r18
 2fa:	b0 01       	movw	r22, r0
 2fc:	b3 9f       	mul	r27, r19
 2fe:	c0 01       	movw	r24, r0
 300:	a3 9f       	mul	r26, r19
 302:	70 0d       	add	r23, r0
 304:	81 1d       	adc	r24, r1
 306:	11 24       	eor	r1, r1
 308:	91 1d       	adc	r25, r1
 30a:	b2 9f       	mul	r27, r18
 30c:	70 0d       	add	r23, r0
 30e:	81 1d       	adc	r24, r1
 310:	11 24       	eor	r1, r1
 312:	91 1d       	adc	r25, r1
 314:	08 95       	ret

00000316 <_exit>:
 316:	f8 94       	cli

00000318 <__stop_program>:
 318:	ff cf       	rjmp	.-2      	; 0x318 <__stop_program>
